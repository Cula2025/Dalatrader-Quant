# -*- coding: utf-8 -*-
from __future__ import annotations

import json

from pathlib import Path
from typing import Dict, Any, List

import pandas as pd
import streamlit as st


# --- helper: build current payload for backtest ---
def _current_params_payload():
    ticker = (st.session_state.get("ticker") or "").strip()
    params = _collect_params_from_state()
    return {"ticker": ticker, "params": params}



# === Minimal profile loader (runs BEFORE widgets) ===
from pathlib import Path as _Path
import json as _json

def _apply_profile_to_session(_prof: dict):
    # Ticker
    t = (_prof.get("ticker") or "").strip()
    if t:
        st.session_state["ticker"] = t
    # Params
    params = _prof.get("params") or {}
    keymap = {
        "use_rsi_filter":"use_rsi_filter","rsi_window":"rsi_window","rsi_min":"rsi_min","rsi_max":"rsi_max",
        "use_trend_filter":"use_trend_filter","trend_ma_type":"trend_ma_type","trend_ma_window":"trend_ma_window",
        "breakout_lookback":"breakout_lookback","exit_lookback":"exit_lookback",
        "use_macd_filter":"use_macd_filter","macd_fast":"macd_fast","macd_slow":"macd_slow","macd_signal":"macd_signal",
        "use_bb_filter":"use_bb_filter","bb_window":"bb_window","bb_nstd":"bb_nstd","bb_min":"bb_min",
        "use_stop_loss":"use_stop_loss","stop_mode":"stop_mode","stop_loss_pct":"stop_loss_pct",
        "atr_window":"atr_window","atr_mult":"atr_mult",
        "use_atr_trailing":"use_atr_trailing","atr_trail_mult":"atr_trail_mult",
        # datum kan ligga både i rot och i params i dina filer – kolla båda
    }
    for s_key, d_key in keymap.items():
        if s_key in params:
            st.session_state[d_key] = params[s_key]

    # Datum (fallbacks)
    fd = params.get("from_date") or _prof.get("from_date") or _prof.get("start") or ""
    td = params.get("to_date")   or _prof.get("to_date")   or _prof.get("end")   or ""
    if fd: st.session_state["from_date"] = str(fd)
    if td: st.session_state["to_date"]   = str(td)

# UI: välj fil & profil (vänsterspalt)
with st.sidebar.expander("Ladda profil", expanded=True):
    base_dir = _Path("/srv/trader/app/profiles") if _Path("/srv/trader/app/profiles").exists() else _Path.cwd() / "profiles"
    files = sorted([fp for fp in base_dir.glob("*.json") if fp.is_file()], key=lambda x: x.name.lower())
    file_names = [f.name for f in files]
    file_idx = st.selectbox("Profilfil", options=range(len(file_names)) if file_names else [], format_func=lambda i: file_names[i], key="__prof_file_idx__")

    profiles = []
    if files:
        try:
            with open(files[file_idx], "r", encoding="utf-8") as _f:
                data = _json.load(_f)
            profiles = data.get("profiles", [])
        except Exception as _e:
            st.warning(f"Kunde inte läsa {files[file_idx].name}: {type(_e).__name__}: {_e}")

    def _label(i: int) -> str:
        p = profiles[i]
        t = (p.get("ticker") or "").strip()
        n = p.get("name") or p.get("profile") or f"Profil {i+1}"
        return f"{t} – {n}" if t else n

    prof_idx = st.selectbox("Välj profil", options=range(len(profiles)) if profiles else [], format_func=_label, key="__prof_idx__")

    if st.button("✅ Använd i Backtest", width='stretch'):
        if profiles:
            _apply_profile_to_session(profiles[prof_idx])
            st.rerun()
# --- helper: collect params from session (dict for backtest) ---
def _collect_params_from_state():
    s = st.session_state
    keys = [
        "from_date","to_date",
        "use_rsi_filter","rsi_window","rsi_min","rsi_max",
        "use_trend_filter","trend_ma_type","trend_ma_window",
        "breakout_lookback","exit_lookback",
        "use_macd_filter","macd_fast","macd_slow","macd_signal",
        "use_bb_filter","bb_window","bb_nstd","bb_min",
        "use_stop_loss","stop_mode","stop_loss_pct",
        "atr_window","atr_mult",
        "use_atr_trailing","atr_trail_mult",
    ]
    params = {}
    for k in keys:
        if k in s:
            params[k] = s[k]
    # datum-fallbacks om UI använder andra nycklar
    if not params.get("from_date") and "start" in s:
        params["from_date"] = s["start"]
    if not params.get("to_date") and "end" in s:
        params["to_date"] = s["end"]
    return params

# --- DEBUG START ---


with st.sidebar.expander("DEBUG payload", expanded=False):
    try:
        payload = _current_params_payload()
        st.json(payload)
    except Exception as e:
        import traceback
        st.write("DEBUG payload misslyckades:", type(e).__name__, str(e))
        st.code(traceback.format_exc())

