import json
from pathlib import Path
import pandas as pd
import streamlit as st

# K√∂r motorn via v√•r wrapper (√§ndra till backtracker om du k√∂r den varianten)
try:
    from app import btwrap as W
    run_backtest = W.run_backtest
    MOTOR = "btwrap"
except Exception:
    from app.backtracker import run_backtest  # type: ignore
    MOTOR = "backtracker"

st.set_page_config(page_title="Trades ‚Äì Portfolio V2", layout="wide")
st.title("üßæ Trades ‚Äì Portfolio V2 (l√§s-endast)")

# --- Hj√§lpare ---
def load_best_profile(p: Path):
    d = json.loads(p.read_text(encoding="utf-8"))
    profs = d.get("profiles") or []
    if not profs:
        return None
    def tr(x):
        m = x.get("metrics") or {}
        v = m.get("TotalReturn")
        try: return float(v)
        except Exception: return float("-inf")
    return max(profs, key=tr)

def to_trades_df(obj):
    if obj is None:
        return None
    if isinstance(obj, pd.DataFrame):
        return obj.copy()
    if isinstance(obj, (list, tuple)):
        try:
            return pd.DataFrame(obj)
        except Exception:
            return None
    return None

# --- V√§lj profilfiler ---
all_files = sorted(Path("profiles").glob("*.json"), key=lambda p: p.name.lower())
labels = [p.name for p in all_files]
default = labels[:3] if labels else []

sel = st.multiselect("Profilfiler (vi tar b√§sta profilen per fil)", labels, default=default)

rows = []
summary = []

for name in sel:
    p = Path("profiles") / name
    try:
        best = load_best_profile(p)
        if not best:
            st.warning(f"{name}: inga profiler i filen.")
            continue
        ticker = best.get("ticker") or (best.get("params") or {}).get("ticker")
        params = dict(best.get("params") or {})
        if not ticker:
            st.warning(f"{name}: kunde inte hitta ticker i profilen {best.get('name')!r}.")
            continue

        res = run_backtest(p={"ticker": ticker, "params": params})
        trades_obj = res.get("trades", None)
        df = to_trades_df(trades_obj)
        if df is None or df.empty:
            st.info(f"{name}: inga trades (eller ok√§nt format).")
            continue

        # Datumkolumner ‚Üí datetime (t√•l olika namn)
        for col in ["Date","date","EntryDate","ExitDate","entry_date","exit_date","timestamp","Time","time"]:
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors="coerce")

        df["Ticker"] = ticker
        df["Profile"] = best.get("name")
        rows.append(df)

        summary.append({
            "File": name,
            "Ticker": ticker,
            "Profile": best.get("name"),
            "Trades": int(len(df)),
        })

    except Exception as e:
        st.error(f"{name}: {type(e).__name__}: {e}")

# --- Visa trades ---
st.caption(f"Motor: {MOTOR}  |  Valda filer: {len(sel)}")
if rows:
    trades = pd.concat(rows, ignore_index=True, sort=False)

    # Plocka ut vanliga kolumner om de finns ‚Äì annars visa allt
    preferred = [c for c in [
        "Date","EntryDate","ExitDate","Side","Action","Signal",
        "Qty","Quantity","Entry","EntryPrice","Exit","ExitPrice",
        "Price","Stop","PnL","Pnl","CumPnL","Cash","Equity",
        "Ticker","Profile"
    ] if c in trades.columns]
    show = trades[preferred] if preferred else trades

    st.subheader(f"Trades ({len(trades)})")
    st.dataframe(show, use_container_width=True, hide_index=True)

    # Sammanfattning
    if summary:
        st.subheader("Sammanfattning")
        st.dataframe(pd.DataFrame(summary), use_container_width=True, hide_index=True)

    # Export
    st.download_button(
        "‚¨áÔ∏è Ladda ner alla trades som CSV",
        trades.to_csv(index=False).encode("utf-8"),
        file_name="trades_all.csv",
        mime="text/csv"
    )
else:
    st.info("Inga trades att visa ‚Äì v√§lj en eller flera profilfiler ovan.")
